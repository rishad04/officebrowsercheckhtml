
-- TODO

# Flutter Overlay Data Entry App - Complete Setup Guide

## Project Structure
```
overlay_data_entry/
├── lib/
│   ├── main.dart
│   ├── database_helper.dart
│   ├── data_entry_screen.dart
│   ├── entries_list_screen.dart
│   ├── overlay_service.dart
│   └── models/
│       └── entry_model.dart
├── android/
│   └── app/
│       └── src/
│           └── main/
│               └── AndroidManifest.xml
└── pubspec.yaml
```

## Setup Instructions

### 1. Create New Flutter Project
```bash
flutter create overlay_data_entry
cd overlay_data_entry
```

### 2. Update pubspec.yaml
Replace the contents with the pubspec.yaml provided in the Android configuration file.

### 3. Install Dependencies
```bash
flutter pub get
```

### 4. Update Android Permissions
Replace `android/app/src/main/AndroidManifest.xml` with the provided configuration.

### 5. Add the Source Files
Create each Dart file in the lib/ directory with the provided code.

### 6. Build and Test
```bash
flutter run
```

## Additional Utility Files

### models/entry_model.dart
```dart
class EntryModel {
  final int? id;
  final String spreadsheet;
  final String groupName;
  final String category;
  final String? description;
  final DateTime createdAt;

  EntryModel({
    this.id,
    required this.spreadsheet,
    required this.groupName,
    required this.category,
    this.description,
    required this.createdAt,
  });

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'spreadsheet': spreadsheet,
      'group_name': groupName,
      'category': category,
      'description': description,
      'created_at': createdAt.toIso8601String(),
    };
  }

  factory EntryModel.fromMap(Map<String, dynamic> map) {
    return EntryModel(
      id: map['id'],
      spreadsheet: map['spreadsheet'],
      groupName: map['group_name'],
      category: map['category'],
      description: map['description'],
      createdAt: DateTime.parse(map['created_at']),
    );
  }
}
```

### utils/constants.dart
```dart
class AppConstants {
  static const String appName = 'Overlay Data Entry';
  static const String dbName = 'data_entries.db';
  static const int dbVersion = 1;
  
  // Table names
  static const String entriesTable = 'entries';
  static const String spreadsheetsTable = 'spreadsheets';
  
  // Default spreadsheets
  static const List<String> defaultSpreadsheets = [
    'Personal Groups',
    'Work Categories',
    'Project Teams',
  ];
}
```

### utils/app_colors.dart
```dart
import 'package:flutter/material.dart';

class AppColors {
  static const Color primary = Color(0xFF2196F3);
  static const Color secondary = Color(0xFF9C27B0);
  static const Color accent = Color(0xFF4CAF50);
  static const Color error = Color(0xFFE53E3E);
  static const Color warning = Color(0xFFFF9800);
  static const Color success = Color(0xFF4CAF50);
  
  static const Color cardBackground = Color(0xFFF8F9FA);
  static const Color textPrimary = Color(0xFF333333);
  static const Color textSecondary = Color(0xFF666666);
}
```

## Features Implemented

### ✅ Core Features
- **Overlay Button**: System-wide floating action button
- **Data Entry Form**: Quick form with spreadsheet selection
- **Local Database**: SQLite storage for all entries
- **Search & Filter**: Find entries by name, category, or spreadsheet
- **CRUD Operations**: Create, Read, Update, Delete entries
- **Multiple Spreadsheets**: Organize data into different categories

### ✅ UI/UX Features
- **Material Design**: Modern Android design principles
- **Responsive Layout**: Works on different screen sizes
- **Loading States**: Visual feedback during operations
- **Error Handling**: User-friendly error messages
- **Confirmation Dialogs**: Safe deletion with confirmation
- **Real-time Search**: Instant filtering as you type

### ✅ Technical Features
- **Permissions Handling**: Automatic permission requests
- **Database Migration**: Structured database with proper relations
- **State Management**: Proper Flutter state management
- **Memory Efficiency**: Optimized database queries
- **Background Service**: Overlay service management

## Usage Instructions

### 1. First Launch
1. Open the app
2. Grant overlay permission when prompted
3. Grant storage permission for database access

### 2. Activate Overlay
1. Tap "Start Overlay" on the home screen
2. The floating button will appear over other apps
3. You can now switch to any app while keeping the overlay active

### 3. Add New Entry
1. Tap the floating overlay button (appears over any app)
2. Or use "Add New Entry" button in the main app
3. Select your desired spreadsheet from the dropdown
4. Fill in the Group Name and Category (required fields)
5. Add optional description
6. Tap "Save Entry"

### 4. View and Manage Entries
1. Tap "View All Entries" in the main app
2. Use the search bar to find specific entries
3. Filter by spreadsheet using the dropdown
4. Tap the menu (⋮) on any entry to delete it
5. Pull down to refresh the list

### 5. Manage Spreadsheets
1. In the data entry form, tap the "+" icon in the app bar
2. Enter a new spreadsheet name
3. The new spreadsheet will be available in all dropdowns

## Troubleshooting

### Common Issues

#### Overlay Not Appearing
- **Cause**: Overlay permission not granted
- **Solution**: Go to Settings > Apps > Overlay Data Entry > Permissions > Display over other apps > Enable

#### App Crashes on Startup
- **Cause**: Database initialization error
- **Solution**: Clear app data or reinstall the app

#### Data Not Saving
- **Cause**: Storage permission not granted
- **Solution**: Grant storage permission in app settings

#### Overlay Button Not Clickable
- **Cause**: Android system restrictions
- **Solution**: Restart the overlay service by toggling it off and on

### Performance Tips
- Keep the overlay active only when needed to save battery
- Regularly clear old entries you no longer need
- Use descriptive names for easy searching
- Organize entries using different spreadsheets

## Customization Options

### Modifying the Overlay Button
```dart
// In overlay_service.dart, modify the showOverlay method:
await SystemAlertWindow.showSystemWindow(
  height: 100,        // Change button size
  width: 100,         // Change button size
  margin: SystemWindowMargin(
    left: 16, 
    top: 200,         // Change vertical position
    right: 16, 
    bottom: 16
  ),
  gravity: SystemWindowGravity.BOTTOM,  // Change position (TOP, CENTER, BOTTOM)
  // ... other parameters
);
```

### Adding New Fields to Entry Form
1. Update the database schema in `database_helper.dart`
2. Add new form fields in `data_entry_screen.dart`
3. Update the EntryModel in `models/entry_model.dart`
4. Modify the display in `entries_list_screen.dart`

### Changing App Theme
```dart
// In main.dart, modify the theme:
theme: ThemeData(
  primarySwatch: Colors.green,  // Change primary color
  useMaterial3: true,
  colorScheme: ColorScheme.fromSeed(
    seedColor: Colors.green,    // Change accent color
    brightness: Brightness.light,  // Or Brightness.dark
  ),
),
```

## Advanced Features

### Export Data to CSV
```dart
// Add to database_helper.dart
Future<String> exportToCSV() async {
  final entries = await getEntries();
  String csv = 'Group Name,Category,Spreadsheet,Description,Created At\n';
  
  for (final entry in entries) {
    csv += '"${entry['group_name']}","${entry['category']}","${entry['spreadsheet']}","${entry['description'] ?? ''}","${entry['created_at']}"\n';
  }
  
  return csv;
}
```

### Backup and Restore
```dart
// Add to database_helper.dart
Future<Map<String, dynamic>> backupData() async {
  final entries = await getEntries();
  final spreadsheets = await getSpreadsheets();
  
  return {
    'entries': entries,
    'spreadsheets': spreadsheets,
    'backup_date': DateTime.now().toIso8601String(),
  };
}

Future<void> restoreData(Map<String, dynamic> backup) async {
  final db = await database;
  
  // Clear existing data
  await db.delete('entries');
  await db.delete('spreadsheets');
  
  // Restore spreadsheets
  for (final spreadsheet in backup['spreadsheets']) {
    await db.insert('spreadsheets', spreadsheet);
  }
  
  // Restore entries
  for (final entry in backup['entries']) {
    await db.insert('entries', entry);
  }
}
```

### Search with Categories
```dart
// Enhanced search functionality
void _advancedFilter({
  String? searchQuery,
  String? spreadsheetFilter,
  String? categoryFilter,
  DateTime? dateFrom,
  DateTime? dateTo,
}) {
  setState(() {
    _filteredEntries = _entries.where((entry) {
      // Text search
      final matchesSearch = searchQuery == null || 
          searchQuery.isEmpty ||
          entry['group_name'].toString().toLowerCase().contains(searchQuery.toLowerCase()) ||
          entry['category'].toString().toLowerCase().contains(searchQuery.toLowerCase());

      // Spreadsheet filter
      final matchesSpreadsheet = spreadsheetFilter == null || 
          spreadsheetFilter == 'All' ||
          entry['spreadsheet'] == spreadsheetFilter;

      // Category filter
      final matchesCategory = categoryFilter == null || 
          categoryFilter == 'All' ||
          entry['category'] == categoryFilter;

      // Date range filter
      final entryDate = DateTime.parse(entry['created_at']);
      final matchesDateRange = (dateFrom == null || entryDate.isAfter(dateFrom)) &&
          (dateTo == null || entryDate.isBefore(dateTo));

      return matchesSearch && matchesSpreadsheet && matchesCategory && matchesDateRange;
    }).toList();
  });
}
```

## Security Considerations

### Data Protection
- All data is stored locally on the device
- No network communication for sensitive data
- Database is encrypted by Android's app sandbox
- Overlay permissions are explicitly requested

### Privacy
- App only accesses data you explicitly enter
- No automatic data collection
- No analytics or tracking
- No cloud synchronization (unless you implement it)

## Building for Release

### 1. Update App Signing
```bash
# Generate keystore
keytool -genkey -v -keystore ~/upload-keystore.jks -keyalg RSA -keysize 2048 -validity 10000 -alias upload

# Update android/app/build.gradle
android {
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}
```

### 2. Build Release APK
```bash
flutter build apk --release
```

### 3. Build App Bundle (for Play Store)
```bash
flutter build appbundle --release
```

## Future Enhancements

### Possible Additions
- **Cloud Sync**: Synchronize data across devices
- **Widgets**: Home screen widgets for quick access
- **Voice Input**: Add entries using voice commands
- **Smart Categories**: Auto-suggest categories based on history
- **Statistics**: View usage statistics and trends
- **Themes**: Multiple UI themes and customization
- **Gestures**: Swipe actions for quick operations
- **Notifications**: Reminders and scheduled entries
- **Import/Export**: Support for Excel, JSON formats
- **Collaboration**: Share spreadsheets with team members

### Technical Improvements
- **State Management**: Implement Provider or Riverpod
- **Architecture**: Clean architecture with repositories
- **Testing**: Unit and integration tests
- **CI/CD**: Automated building and deployment
- **Performance**: Database indexing and optimization
- **Accessibility**: Screen reader support and navigation

## Conclusion

This Flutter Overlay Data Entry app provides a complete solution for quick data capture with system-wide accessibility. The overlay functionality allows users to add entries from any app, while the robust local storage ensures data persistence and quick retrieval.

The modular architecture makes it easy to extend with additional features, and the Material Design ensures a familiar Android experience. The app handles permissions gracefully and provides clear feedback to users throughout their interaction.

For any issues or feature requests, consider the customization options provided above or extend the codebase according to your specific requirements.